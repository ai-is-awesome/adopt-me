function round(num) {
  return Math.round(num * 100) / 100;
}
function get_mean(arr) {
  const sum = arr.reduce((accumulator, currentValue) => {
    return accumulator + currentValue;
  }, 0);

  return round(sum / arr.length, 1);
}

function get_median(arr) {
  const mid = Math.floor(arr.length / 2),
    nums = [...arr].sort((a, b) => a - b);
  return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;
}

function normalize(data, n, threshold, summary_type) {
  myArr = [];
  new_data_arr = data.concat(data.slice(0, n));
  var summary_type = summary_type.toLowerCase();
  for (let i = 0; i < data.length; i++) {
    subset = new_data_arr.slice(i, i + n);
    current_datapoint = data[i] === 0 ? 0.1 : data[i];

    if (summary_type === "mean") {
      var summary = get_mean(subset);
    } else if (summary_type === "median") {
      var summary = get_median(subset);
    }

    // upward spike
    if (current_datapoint > summary) {
      if (new_data_arr[i] / summary > threshold) {
        myArr.push(summary);
        console.log(
          "Current Number:",
          data[i],
          "subset: ",
          subset,
          `${summary_type}:`,
          summary,
          "Selected: ",
          summary
        );
      } else if (new_data_arr[i] / summary <= threshold) {
        myArr.push(current_datapoint);
      }
    }
    // Downward spike
    else if (current_datapoint[i] <= summary) {
      //  If it's an outlier, push the median to array
      if (summary / current_datapoint[i] > threshold) {
        myArr.push(summary);
        console.log(
          "Current Number:",
          data[i],
          "subset: ",
          subset,
          `${summary_type}: `,
          summary,
          "Selected: ",
          summary
        );
      } else if (median / current_datapoint[i] <= threshold) {
        myArr.push(data[i]);
        console.log(
          "Current Number:",
          data[i],
          "subset: ",
          subset,
          `${summary_type}: `,
          summary,
          "Selected:",
          current_datapoint[i]
        );
      }
    }
  }
  return [myArr];
}

normalize(
  [
    18,
    15,
    12,
    7,
    4,
    26,
    4,
    0,
    8,
    11,
    4,
    0,
    11,
    0,
    0,
    12,
    4,
    4,
    16,
    4,
    8,
    4,
    8,
    13,
    16,
    4,
    12,
    16,
    8,
    11,
    19,
    15,
    8,
    4,
    19,
    4,
    0,
    15,
    11,
    11,
    14,
    0,
    16,
    41,
    39,
    14,
    10,
    21,
    7,
    10,
    7,
    17,
    17,
    3,
    28,
    59,
    7,
    11,
    35,
    14,
    28,
    7,
    22,
    26,
    22,
    33,
    15,
    14,
    15,
    15,
    15,
    15,
    37,
    11,
    28,
    36,
    36,
    28,
    21,
    10,
    24,
    28,
    21,
    17,
    21,
    21,
    21,
    10,
    20,
    13,
    37,
    20,
    24,
    11,
    23,
    28,
    23,
    7,
    32,
    10,
    46,
    10,
    29,
    45,
    49,
    16,
    16,
    24,
    67,
    29,
    30,
    16,
    23,
    19,
    26,
    20,
    30,
    17,
    32,
    13,
    16,
    7,
    16,
    20,
    20,
    35,
    19,
    23,
    37,
    19,
    29,
    19,
    13,
    13,
    26,
    13,
    26,
    16,
    20,
    3,
    19,
    51,
    57,
    19,
    39,
    33,
    54,
    17,
    32,
    10,
    31,
    53,
    100,
    15,
    25,
    28,
    25,
    28,
    41,
    22,
    28,
    42,
    27,
    20,
    13,
    22,
    19,
    25,
    32,
    50,
    31,
    26,
    22,
    26,
    19,
    6,
    39,
    23,
    20,
    13,
    25,
    28,
    12,
    27,
    30,
    24,
    33,
    18,
    24,
    20,
    15,
    23,
    35,
    6,
    29,
    29,
    30,
    21,
    13,
    19,
    20,
    22,
    46,
    40,
    22,
    65,
    50,
    27,
    19,
    43,
    13,
    20,
    20,
    13,
    18,
    28,
    35,
    20,
    26,
    31,
    23,
    23,
    18,
    29,
    35,
    46,
    28,
    22,
    19,
    25,
    19,
    25,
    11,
    54,
    32,
    29,
    16,
    26,
    22,
    33,
    46,
    40,
    40,
    40,
    28,
    34,
    39,
    44,
    33,
    54,
    28,
    39,
    50,
    53,
    42,
    44,
    36,
    28,
    14,
    32,
  ],
  5,
  1,
  "mean"
);
